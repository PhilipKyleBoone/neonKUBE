//-----------------------------------------------------------------------------
// FILE:		errors.go
// CONTRIBUTOR: John C Burns
// COPYRIGHT:	Copyright (c) 2016-2019 by neonFORGE, LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package proxyerror

import (
	"fmt"

	"go.uber.org/cadence"
)

type (

	// CadenceError is a struct used to pass errors
	// generated by calls to the cadence server from the
	// cadence-proxy to the Neon.Cadence Library.
	CadenceError struct {
		String *string `json:"String"`
		Type   *string `json:"Type"`
	}
)

// NewCadenceErrorEmpty is the default constructor for a CadenceError.
//
// returns *CadenceError -> pointer to a newly initialized CadenceError
// in memory.
func NewCadenceErrorEmpty() *CadenceError {
	return &CadenceError{}
}

// NewCadenceError is the constructor for a CadenceError
// when supplied parameters.
//
// param err error -> error to set.
//
// param errorType ...interface{} -> the cadence error type.
func NewCadenceError(err error, errTypes ...CadenceErrorType) *CadenceError {
	if err == nil {
		return nil
	}

	var errType CadenceErrorType
	if len(errTypes) > 0 {
		errType = errTypes[0]
	} else {
		if cadence.IsCanceledError(err) {
			errType = Cancelled
		} else if cadence.IsCustomError(err) {
			errType = Custom
		} else if cadence.IsGenericError(err) {
			errType = Generic
		} else if cadence.IsPanicError(err) {
			errType = Panic
		} else if cadence.IsTerminatedError(err) {
			errType = Terminated
		} else if cadence.IsTimeoutError(err) {
			errType = Timeout
		} else {
			errType = Custom
		}
	}

	errStr := err.Error()
	errTypeStr := errType.String()

	return &CadenceError{String: &errStr, Type: &errTypeStr}
}

func (c *CadenceError) Error() string {
	if c.String == nil {
		return ""
	}

	return *c.String
}

// GetType gets the CadenceErrorType from a CadenceError
// instance.
//
// returns CadenceErrorType -> the corresponding error type to the
// string representing the error type in a CadenceError instance
func (c *CadenceError) GetType() CadenceErrorType {
	if c.Type == nil {
		err := fmt.Errorf("no error type set")
		panic(err)
	}

	switch *c.Type {
	case "cancelled":
		return Cancelled
	case "custom":
		return Custom
	case "generic":
		return Generic
	case "panic":
		return Panic
	case "terminated":
		return Terminated
	case "timeout":
		return Timeout
	default:
		err := fmt.Errorf("unrecognized error type %v", *c.Type)
		panic(err)
	}
}

// // SetType sets the *string to the corresponding CadenceErrorType
// // in a CadenceError instance
// //
// // param errorType CadenceErrorType -> the CadenceErrorType to set as a string
// // in a CadenceError instance
// func (c *CadenceError) SetType(errorType CadenceErrorType) {
// 	var typeString string
// 	switch errorType {
// 	case Cancelled:
// 		typeString = "cancelled"
// 	case Custom:
// 		typeString = "custom"
// 	case Generic:
// 		typeString = "generic"
// 	case Panic:
// 		typeString = "panic"
// 	case Terminated:
// 		typeString = "terminated"
// 	case Timeout:
// 		typeString = "timeout"
// 	default:
// 		err := fmt.Errorf("unrecognized error type %s", errorType)
// 		panic(err)
// 	}
// 	c.Type = &typeString
// }
