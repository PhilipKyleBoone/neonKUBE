<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Cryptography</name>
    </assembly>
    <members>
        <member name="T:Neon.Cryptography.AesCipher">
            <summary>
            Implements a convienent wrapper over <see cref="T:System.Security.Cryptography.AesManaged"/> that handles
            the encryption and decryption of data using the AES algorthim using many
            security best practices.
            </summary>
            <remarks>
            <para>
            This class uses the <see cref="T:System.IO.BinaryWriter"/> to generate the encrypted
            output and <see cref="T:System.IO.BinaryReader"/> to read it.
            </para>
            <para>
            The data is formatted with an unencrypted header that specifies the
            initialization vector (IV), as well as the HMAC512 that will be used
            to validate the encrypted data.  The encrypted data includes variable
            length psuedo random padding followed by the encrypted user data.
            </para>
            <code>
             Header (plaintext)
            +------------------+
            |    0x3BBAA035    |    32-bit magic number (for verification)
            +------------------+
            |     IV Size      |    16-bits
            +------------------+
            |                  |
            |     IV Bytes     |    IV Size bytes
            |                  |
            +------------------+
            |    HMAC Size     |    16-bits
            +------------------+
            |                  |
            |    HMAC Bytes    |    HMAC Size bytes
            |                  |
            +-------------------
            
              AES256 Encrypted:
            +------------------+
            |   Padding Size   |    16-bits
            +------------------+
            |                  |
            |   Padding Bytes  |    Padding Size bytes
            |                  |
            +------------------+
            |                  |
            |                  |
            |                  |
            |    User Data     |
            |                  |
            |                  |
            |                  |
            +------------------+
            </code>
            <note>
            Note that this encodes multi-byte integers using <b>little endian</b>
            byte ordering via <see cref="T:System.IO.BinaryWriter"/> and <see cref="T:System.IO.BinaryReader"/>.
            </note>
            <para>
            This class automatically generates a new initialization vector for every
            encyption operation.  This ensures that every encryption operation will
            generate different ciphertext even when the key and data haven't changed
            to enhance security.
            </para>
            <para>
            The class is designed to be easier to use than the .NET Core <see cref="T:System.Security.Cryptography.AesManaged"/>
            base implementation.
            </para>
            <para>
            To encrypt data:
            </para>
            <list type="number">
            <item>
            Generate an encryption key via <see cref="M:Neon.Cryptography.AesCipher.GenerateKey(System.Int32)"/> and create an instance
            via <see cref="M:Neon.Cryptography.AesCipher.#ctor(System.String,System.Int32)"/> passing the key, or just call <see cref="M:Neon.Cryptography.AesCipher.#ctor(System.Int32,System.Int32)"/>
            to create with a generated key of the specified size.
            </item>
            <item>
            You can always obtain the key via the <see cref="P:Neon.Cryptography.AesCipher.Key"/> property.
            </item>
            <item>
            Call one of <see cref="M:Neon.Cryptography.AesCipher.EncryptToBase64(System.Byte[])"/>, <see cref="M:Neon.Cryptography.AesCipher.EncryptToBase64(System.Byte[])"/>, 
            <see cref="M:Neon.Cryptography.AesCipher.EncryptToBytes(System.String)"/>, or <see cref="M:Neon.Cryptography.AesCipher.EncryptToBytes(System.Byte[])"/> to perform
            the encryption with varying input and output formats.
            </item>
            </list>
            <para>
            To decrypt data:
            </para>
            <list type="number">
            <item>
            Use <see cref="M:Neon.Cryptography.AesCipher.#ctor(System.String,System.Int32)"/> to construct and instance using the key originally
            used to encrypt the data.
            </item>
            <item>
            Call one of <see cref="M:Neon.Cryptography.AesCipher.DecryptBytesFrom(System.Byte[])"/>, <see cref="M:Neon.Cryptography.AesCipher.DecryptBytesFrom(System.String)"/>,
            <see cref="M:Neon.Cryptography.AesCipher.DecryptStringFrom(System.Byte[])"/>, or <see cref="M:Neon.Cryptography.AesCipher.DecryptStringFrom(System.Byte[])"/>.
            to decrypt data.
            </item>
            </list>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="F:Neon.Cryptography.AesCipher.Magic">
            <summary>
            The 32-bit magic number that will be written in plaintext to the
            beginning of the encrypted output to be used to verify that 
            encrypted buffers will generated by this class.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.GenerateKey(System.Int32)">
            <summary>
            Generates a random encryption key with the specified size in bits.
            </summary>
            <param name="keySize">The key size in bits (default <b>256</b>).</param>
            <returns>The key encoded as base-64.</returns>
            <remarks>
            Note that only these key sizes are currently supported: <b>128</b>, <b>192</b>,
            and <b>256</b> bits.  Only 256 bits is currently considered to be secure.
            </remarks>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.#ctor(System.String,System.Int32)">
            <summary>
            Constructs an AES cypher using a specific encryption key.
            </summary>
            <param name="key">The base-64 encoded key.</param>
            <param name="maxPaddingBytes">
            The maximum number of padding bytes.  This must be less than or equal
            to 32767.  This defaults to 64.
            </param>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an AES cypher using a randomly generated encyption key.
            </summary>
            <param name="keySize">Optionally specifies the key size (defaults to <b>256 bits</b>).</param>
            <param name="maxPaddingBytes">
            The maximum number of padding bytes.  This must be less than or equal
            to 32767.  This defaults to 64.
            </param>
            <remarks>
            Note that only these key sizes are currently supported: <b>128</b>, <b>192</b>,
            and <b>256</b> bits.  Only 256 bits is currently considered to be secure.
            </remarks>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.EnsureNotDisposed">
            <summary>
            Ensures that the instance hasn't been disposed.
            </summary>
        </member>
        <member name="P:Neon.Cryptography.AesCipher.Key">
            <summary>
            Returns the encyption key encoded as base-64.
            </summary>
        </member>
        <member name="P:Neon.Cryptography.AesCipher.IV">
            <summary>
            Returns the encyption initialization vector encoded as base-64.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.EncryptToBytes(System.Byte[])">
            <summary>
            Encrypts the text passed returning the result encoded as
            a byte array.
            </summary>
            <param name="decryptedBytes">The unencrypted bytes.</param>
            <returns>The encrypted result as bytes.</returns>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.EncryptToBytes(System.String)">
            <summary>
            Encrypts the text passed returning the result encoded as
            a byte array.
            </summary>
            <param name="decryptedText">The unencrypted text.</param>
            <returns>The encrypted result as bytes.</returns>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.EncryptToBase64(System.String)">
            <summary>
            Encrypts the text passed returning the result encoded as base-64.
            </summary>
            <param name="decryptedText">The unencrypted text.</param>
            <returns>The encrypted result as base-64.</returns>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.EncryptToBase64(System.Byte[])">
            <summary>
            Encrypts the bytes passed returning the result encoded as base-64.
            </summary>
            <param name="decryptedBytes">The unencrypted text.</param>
            <returns>The encrypted result as base-64.</returns>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.EncryptStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Encrypts one stream to another.
            </summary>
            <param name="decrypted">The decrypted input stream.</param>
            <param name="encrypted">The encrypted output stream.</param>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.DecryptBytesFrom(System.Byte[])">
            <summary>
            Decrypts the encrypted base-64 text passed returning the result as 
            a byte array.
            </summary>
            <param name="encryptedBytes">The encrypted bytes.</param>
            <returns>The encrypted result as a string.</returns>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.DecryptBytesFrom(System.String)">
            <summary>
            Decrypts the encrypted base-64 text passed returning the result as 
            a byte array.
            </summary>
            <param name="encryptedBase64">The encrypted base-64 text.</param>
            <returns>The encrypted result as a string.</returns>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.DecryptStringFrom(System.Byte[])">
            <summary>
            Decrypts the encrypted bytes passed returning the result as a string.
            </summary>
            <param name="encryptedBytes">The encrypted base-64 text.</param>
            <returns>The encrypted result as a base-64 string.</returns>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.DecryptStringFrom(System.String)">
            <summary>
            Decrypts the encrypted base-64 text passed returning the result as a string.
            </summary>
            <param name="encryptedBase64">The encrypted base-64 text.</param>
            <returns>The encrypted result as a base-64 string.</returns>
        </member>
        <member name="M:Neon.Cryptography.AesCipher.DecryptStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decrypts one stream to another.
            </summary>
            <param name="encrypted">The encrypted input stream.</param>
            <param name="decrypted">The decrypted output stream.</param>
        </member>
        <member name="T:Neon.Cryptography.CryptoExtensions">
            <summary>
            Crytography extensions.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.CryptoExtensions.ComputeHash(System.Security.Cryptography.MD5,System.String)">
            <summary>
            Computes a hash from a UTF-8 encoded string.
            </summary>
            <param name="hasher">The hasher.</param>
            <param name="input">The input string.</param>
            <returns>The hash bytes.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoExtensions.ComputeHashBase64(System.Security.Cryptography.MD5,System.String)">
            <summary>
            Computes a hash from a UTF-8 encoded string and then encodes
            the result as base-64.
            </summary>
            <param name="hasher">The hasher.</param>
            <param name="input">The input string.</param>
            <returns>The hash bytes encoded as base-64.</returns>
        </member>
        <member name="T:Neon.Cryptography.CryptoHelper">
            <summary>
            Crypography related helper methods.
            </summary>
        </member>
        <member name="F:Neon.Cryptography.CryptoHelper.HMAC256ByteCount">
            <summary>
            The size of an HMAC256 in bytes.
            </summary>
        </member>
        <member name="F:Neon.Cryptography.CryptoHelper.HMAC512ByteCount">
            <summary>
            The size of an HMAC512 in bytes.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.DeriveKeyFromPassword(System.String,System.Int32)">
            <summary>
            Generates a symmetric encryption key from a password string.
            </summary>
            <param name="password">The input password.</param>
            <param name="keySize">
            The desired key size in bits (this must be less than or 
            equal to 512 and be a factor of 8).
            </param>
            <returns>The derived key.</returns>
        </member>
        <member name="F:Neon.Cryptography.CryptoHelper.MD5ByteSize">
            <summary>
            The number of bytes in a MD5 hash.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeMD5String(System.String)">
            <summary>
            Computes the MD5 hash for a string and returns the result
            formatted as a lowercase hex string.
            </summary>
            <param name="input">The input string.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeMD5String(System.Byte[])">
            <summary>
            Computes the MD5 hash for a byte array and returns the result
            formatted as a lowercase hex string.
            </summary>
            <param name="input">The input bytes.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeMD5String(System.IO.Stream)">
            <summary>
            Computes the MD5 hash for a stream from the current position'
            until the end and returns the result formatted as a lowercase 
            hex string.
            </summary>
            <param name="input">The stream.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeMD5Bytes(System.String)">
            <summary>
            Computes the MD5 hash for a string and returns the result
            as a byte array.
            </summary>
            <param name="input">The input string.</param>
            <returns>The hash bytes.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeMD5Bytes(System.Byte[])">
            <summary>
            Computes the MD5 hash for a byte array and returns the result
            as a byte array.
            </summary>
            <param name="input">The input bytes.</param>
            <returns>The hash bytes.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeMD5Bytes(System.IO.Stream)">
            <summary>
            Computes the MD5 hash for a stream from the current position'
            until the end and returns the result formatted as a lowercase 
            hex string.
            </summary>
            <param name="input">The stream.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="F:Neon.Cryptography.CryptoHelper.SHA1ByteSize">
            <summary>
            The number of bytes in a SHA1 hash.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA1String(System.String)">
            <summary>
            Computes the SHA1 hash for a string and returns the result
            formatted as a lowercase hex string.
            </summary>
            <param name="input">The input string.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA1String(System.Byte[])">
            <summary>
            Computes the SHA1 hash for a byte array and returns the result
            formatted as a lowercase hex string.
            </summary>
            <param name="input">The input bytes.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA1String(System.IO.Stream)">
            <summary>
            Computes the SHA1 hash for a stream from the current position'
            until the end and returns the result formatted as a lowercase 
            hex string.
            </summary>
            <param name="input">The stream.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA1Bytes(System.String)">
            <summary>
            Computes the SHA1 hash for a string and returns the result
            as a byte array.
            </summary>
            <param name="input">The input string.</param>
            <returns>The hash bytes.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA1Bytes(System.Byte[])">
            <summary>
            Computes the SHA1 hash for a byte array and returns the result
            as a byte array.
            </summary>
            <param name="input">The input bytes.</param>
            <returns>The hash bytes.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA1Bytes(System.IO.Stream)">
            <summary>
            Computes the SHA1 hash for a stream from the current position'
            until the end and returns the result formatted as a lowercase 
            hex string.
            </summary>
            <param name="input">The stream.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="F:Neon.Cryptography.CryptoHelper.SHA256ByteSize">
            <summary>
            The number of bytes in a SHA256 hash.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA256String(System.String)">
            <summary>
            Computes the SHA256 hash for a string and returns the result
            formatted as a lowercase hex string.
            </summary>
            <param name="input">The input string.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA256String(System.Byte[])">
            <summary>
            Computes the SHA256 hash for a byte array and returns the result
            formatted as a lowercase hex string.
            </summary>
            <param name="input">The input bytes.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA256String(System.IO.Stream)">
            <summary>
            Computes the SHA256 hash for a stream from the current position'
            until the end and returns the result formatted as a lowercase 
            hex string.
            </summary>
            <param name="input">The stream.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA256Bytes(System.String)">
            <summary>
            Computes the SHA256 hash for a string and returns the result
            as a byte array.
            </summary>
            <param name="input">The input string.</param>
            <returns>The hash bytes.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA256Bytes(System.Byte[])">
            <summary>
            Computes the SHA256 hash for a byte array and returns the result
            as a byte array.
            </summary>
            <param name="input">The input bytes.</param>
            <returns>The hash bytes.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA256Bytes(System.IO.Stream)">
            <summary>
            Computes the SHA256 hash for a stream from the current position'
            until the end and returns the result formatted as a lowercase 
            hex string.
            </summary>
            <param name="input">The stream.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="F:Neon.Cryptography.CryptoHelper.SHA512ByteSize">
            <summary>
            The  number of bytes in a SHA512 hash.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA512String(System.String)">
            <summary>
            Computes the SHA512 hash for a string and returns the result
            formatted as a lowercase hex string.
            </summary>
            <param name="input">The input string.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA512String(System.Byte[])">
            <summary>
            Computes the SHA512 hash for a byte array and returns the result
            formatted as a lowercase hex string.
            </summary>
            <param name="input">The input bytes.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA512String(System.IO.Stream)">
            <summary>
            Computes the SHA512 hash for a stream from the current position'
            until the end and returns the result formatted as a lowercase 
            hex string.
            </summary>
            <param name="input">The stream.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA512Bytes(System.String)">
            <summary>
            Computes the SHA512 hash for a string and returns the result
            as a byte array.
            </summary>
            <param name="input">The input string.</param>
            <returns>The hash bytes.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA512Bytes(System.Byte[])">
            <summary>
            Computes the SHA512 hash for a byte array and returns the result
            as a byte array.
            </summary>
            <param name="input">The input bytes.</param>
            <returns>The hash bytes.</returns>
        </member>
        <member name="M:Neon.Cryptography.CryptoHelper.ComputeSHA512Bytes(System.IO.Stream)">
            <summary>
            Computes the SHA512 hash for a stream from the current position'
            until the end and returns the result formatted as a lowercase 
            hex string.
            </summary>
            <param name="input">The stream.</param>
            <returns>The hash HEX string.</returns>
        </member>
        <member name="T:Neon.Cryptography.NamespaceDoc">
            <summary>
            This namespace Includes some cryptographic helper methods and extensuions making operations like
            MD5 or SHA-* hashing easier as well as the <b>NeonVault</b> class which can be used to persist 
            encrypted data (inspired by Ansible Vault).
            </summary>
        </member>
        <member name="T:Neon.Cryptography.NeonVault">
            <summary>
            Manages the encryption and decryption of files using passwords.  This works
            a lot like Ansible Vault.
            </summary>
            <remarks>
            <para>
            This class works by using <see cref="T:Neon.Cryptography.AesCipher"/> with a <b>256-bit key</b> 
            to encrypt and decrypt files using a Neon standard ASCII text file format. 
            This encryption is performed using the value of a named password as the encryption
            key.  The class depends on a password provider function like <c>string LookupPassword(string)</c>
            that will return the value for a named password.
            </para>
            <para>
            The idea here is that applications will define one or more named passwords
            like: <b>mypassword1=GU6qc2vsJgmCWmdL</b> and <b>mypassword2=GBRDUqsX3GSKJ2af</b>
            and then implement a password provider that returns the value of a password
            based on its name.  You'll pass this provider to the <see cref="T:Neon.Cryptography.NeonVault"/>
            constructor.
            </para>
            <note>
            Password names are case insensitive and will always be converted to lowercase
            using the invariant culture.  Password names may include alphanumeric characters
            plus dashs, dots, or underscores.
            </note>
            <para>
            Password providers should throw an exception whenever the named password
            cannot be located.  Most providers will throw a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>
            when this happens.
            </para>
            <para>
            Encrypted files are encoded as ASCII and are formatted like:
            </para>
            <code>
            $NEON_VAULT;4C823A36774CA4AC760F31DD8ABE7BD3;1.0;AES256;PASSWORD-NAME
            4c5330744c5331435255644a5469424452564a5553555a4a51304655525330744c533074436b314a
            53554e3552454e4451574a445a30463353554a425a306c4351555242546b4a6e6133466f61326c48
            4f586377516b465263305a425245465754564a4e64305652575552575556464552586477636d5258
            536d774b5932303162475248566e704e516a5259524652464e5531455358644e616b557954587072
            4d4535736231684556456b3154555246656b314552544a4e656d7377546d787664305a555256524e
            516b564851544656525170426545314c59544e5761567059536e566157464a735933704451304654
            5358644555566c4b53323961535768325930354255555643516c46425247646e5256424252454e44
            515646765132646e52554a42536d6c50436c6b345a45395163324a454f466379526c6b30566a5274
            595570584d323032634452714e5467314e7a4131627a4e47527a6859564730724e33686957465130
            546b68775645686d646e686161584e685a6e6f304f54414b4c325a6a53454d32546b4d3464697445
            4e7a5a355931685156564a3164576f724f56646e51335133555670735a574d7954474a364b7a5a6f
            55466f7a4c32347962544e7a51573952536c527253574e7565485172625170575458527157554d35
            57573970633145305a453877634646444c3141784d6d4d7951586c46515663334d314a4555314256
            526e597a555770365a47777255577052564556784b3068305257704a52544659626b4a70436e4a42
            563078334d323872656d5a4f4e30684559555534596d7061636a4a765a7a687459574a454e566444
            4c30395656
            </code>
            <para>
            The first line of the file holds metadata that is used to identify encrypted files
            and also to identify the encryption method and name of the password to be used
            for decryption.  The remaining lines encode the encrypted <see cref="T:Neon.Cryptography.AesCipher"/> 
            output encoded as 80 character lines of HEX digits.
            </para>
            <para>
            This class considers files starting <b>$NEON_VAULT;4C823A36774CA4AC760F31DD8ABE7BD3</b>
            to be encrypted.  This essentially acts as a very unique magic number.  This is followed 
            by the NeonVault format version (currently <b>1.0</b>), the encryption cypher (currently
            <b>AES256</b>), and the name of the password that was used for encryption.
            </para>
            <para>
            The decrypt methods are smart enough to determine whether a file is not encrypted
            and simply write the unencrypted data to the target.  This means that you can
            safely call these methods on unencrypted data.
            </para>
            <para>
            This class provides several methods to encrypt and decrypt data given a password.
            </para>
            <note>
            Source <see cref="T:System.IO.Stream"/> instances passed to encryption and decryption methods
            must support reading and seeking and target <see cref="T:System.IO.Stream"/> instances must
            support writing as well as reading and seeking to support HMAC signatures.
            </note>
            </remarks>
        </member>
        <member name="F:Neon.Cryptography.NeonVault.MagicString">
            <summary>
            The string at the beginning of all files encrypted by <see cref="T:Neon.Cryptography.NeonVault"/>.
            This is used to identify these files.
            </summary>
        </member>
        <member name="P:Neon.Cryptography.NeonVault.MagicBytes">
            <summary>
            Returns <see cref="F:Neon.Cryptography.NeonVault.MagicString"/> encoded as a byte array for ease of use.
            </summary>
        </member>
        <member name="F:Neon.Cryptography.NeonVault.KeySize">
            <summary>
            The AES key size in buts.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.ValidatePasswordName(System.String)">
            <summary>
            Ensures that a password name is valid.
            </summary>
            <param name="passwordName">The password name.</param>
            <returns>The password name converted to lowercase.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if the name is invalid.</exception>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.IsEncrypted(System.String)">
            <summary>
            Determines if a file is encrypted via <see cref="T:Neon.Cryptography.NeonVault"/>.
            </summary>
            <param name="path">The file path.</param>
            <returns><c>true</c> if the file is encrypted.</returns>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.IsEncrypted(System.String,System.String@)">
            <summary>
            Determines if a file is encrypted via <see cref="T:Neon.Cryptography.NeonVault"/> and returns
            the name of the password used.
            </summary>
            <param name="path">The file path.</param>
            <param name="passwordName">For encrypted files, this returns as the name of the password used.</param>
            <returns><c>true</c> if the file is encrypted.</returns>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.IsEncrypted(System.IO.Stream)">
            <summary>
            Determines if a stream is encrypted via <see cref="T:Neon.Cryptography.NeonVault"/>.
            </summary>
            <param name="stream">The stream.</param>
            <returns><c>true</c> if the stream is encrypted.</returns>
            <remarks>
            <note>
            The stream position must be at the beginning of the stream for this to work.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.IsEncrypted(System.IO.Stream,System.String@)">
            <summary>
            Determines if a stream is encrypted via <see cref="T:Neon.Cryptography.NeonVault"/> and returns
            the name of the password used.
            </summary>
            <param name="stream">The stream.</param>
            <param name="passwordName">For encrypted files, this returns as the name of the password used.</param>
            <returns><c>true</c> if the stream is encrypted.</returns>
            <remarks>
            <note>
            The stream position must be at the beginning of the stream for this to work.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.#ctor(System.Func{System.String,System.String},System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="passwordProvider">
            Specifies the function that returns the password value for 
            a named password.
            </param>
            <param name="lineEnding">
            Optionally specifies line ending to be used when writing the output
            file.  This defaults to the current platform's line ending: "\r\n"
            for Windows and "\n" for Linux, OS/X, etc.
            </param>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.GetKeyFromPassword(System.String)">
            <summary>
            Looks up a password and generates an AES256 key from it.
            </summary>
            <param name="passwordName">The password name.</param>
            <returns>The password encoded as base-64.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown for problems.</exception>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.Encrypt(System.IO.Stream,System.String)">
            <summary>
            Encrypts a stream to a byte array.
            </summary>
            <param name="source">The source stream.</param>
            <param name="passwordName">Identifies the password.</param>
            <returns>The encrypted bytes.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if the password was not found or for other encryption problems.</exception>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a file to a byte array.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="passwordName">Identifies the password.</param>
            <returns>The encrypted bytes.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if the password was not found or for other encryption problems.</exception>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.Encrypt(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Encrypts a stream to another stream.
            </summary>
            <param name="source">The source stream.</param>
            <param name="target">The target stream.</param>
            <param name="passwordName">Identifies the password.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if the password was not found or for other encryption problems.</exception>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.Encrypt(System.IO.Stream,System.String,System.String)">
            <summary>
            Encrypts a stream to a file.
            </summary>
            <param name="source">The source stream.</param>
            <param name="targetPath">The target path.</param>
            <param name="passwordName">Identifies the password.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if the password was not found or for other encryption problems.</exception>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypts a file to another file.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="targetPath">The target path.</param>
            <param name="passwordName">Identifies the password.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if the password was not found or for other encryption problems.</exception>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.Decrypt(System.IO.Stream)">
            <summary>
            Decrypts a stream to a byte array.
            </summary>
            <param name="source">The source.</param>
            <returns>The decrypted byte array.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if the password was not found or for other decryption problems.</exception>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.Decrypt(System.String)">
            <summary>
            Decrypts file to a byte array.
            </summary>
            <param name="sourcePath">The source path.</param>
            <returns>The decrypted bytes.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if the password was not found or for other decryption problems.</exception>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decrypts a stream to another stream.
            </summary>
            <param name="source">The source stream.</param>
            <param name="target">The target stream.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if the password was not found or for other decryption problems.</exception>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.Decrypt(System.String,System.IO.Stream)">
            <summary>
            Decrypts a file to a stream.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="target">The target stream.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if the password was not found or for other decryption problems.</exception>
        </member>
        <member name="M:Neon.Cryptography.NeonVault.Decrypt(System.String,System.String)">
            <summary>
            Decrypts a file to another file.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="targetPath">The target path.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if the password was not found or for other decryption problems.</exception>
        </member>
        <member name="T:Neon.Cryptography.TlsCertificate">
            <summary>
            Holds the public and private parts of a TLS certificate.
            </summary>
            <remarks>
            <para>
            This class follows the <b>HAProxy</b> convention of allowing the PEM encoded public certificate
            and private key to be encoded into a single text file by simply concatenating the public
            certificate with the private key, certificate first.
            </para>
            <note>
            The certificate part must include any intermediate certificates issues by the certificate
            authority after the certificate and before the private key.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.Load(System.String)">
            <summary>
            Loads a combined public certificate and private key from a PEM encoded
            text file.
            </summary>
            <param name="pemCombinedPath">Path to the source file.</param>
            <returns>The parsed <see cref="T:Neon.Cryptography.TlsCertificate"/>.</returns>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.Load(System.String,System.String)">
            <summary>
            Loads a combined public certificate and private key from two PEM encoded
            files.
            </summary>
            <param name="certPath">Path to the public certificate PEM file.</param>
            <param name="keyPath">Path to the private key PEM file.</param>
            <returns>The parsed <see cref="T:Neon.Cryptography.TlsCertificate"/>.</returns>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.Parse(System.String)">
            <summary>
            Parses a certificate and private key from PEM encoded text.
            </summary>
            <param name="pemCombined">The PEM encoded certificate and private key.</param>
            <returns>The parsed <see cref="T:Neon.Cryptography.TlsCertificate"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if the certificate could not be parsed.</exception>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.TryParse(System.String,Neon.Cryptography.TlsCertificate@)">
            <summary>
            Attempts to parse a certificate and private key from PEM encoded text.
            </summary>
            <param name="pemCombined">The PEM encoded certificate and private key.</param>
            <param name="certificate">Returns as the parsed certificate.</param>
            <returns><c>true</c> if the certificate was parsed successfully.</returns>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.FromPemParts(System.String,System.String)">
            <summary>
            Constructs an instance by parsing the certificate and private key PEM encoded
            parts passed.
            </summary>
            <param name="certPem">The certificate PEM text.</param>
            <param name="keyPem">The optional private key PEM text.</param>
            <remarks>
            <note>
            The parts passed must include the <b>-----BEGIN CERTIFICATE-----</b>
            and <b>-----BEGIN PRIVATE KEY-----</b> related headers and footers.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.NormalizePem(System.String)">
            <summary>
            Normalizes PEM encoded text to have Linux style (LF) line endings.
            </summary>
            <param name="input">The input text.</param>
            <returns>The normalized text.</returns>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.CreateSelfSigned(System.String,System.Int32,System.Int32,Neon.Cryptography.Wildcard,System.String,System.String)">
            <summary>
            Generates a self-signed certificate for a hostname and/or a wildcarded hostname.
            </summary>
            <param name="hostname">
            <para>
            The hostname.
            </para>
            <note>
            You can use include a <b>"*"</b> to specify a wildcard
            certificate like: <b>*.test.com</b>.
            </note>
            </param>
            <param name="bitCount">The certificate key size in bits: one of <b>1024</b>, <b>2048</b>, or <b>4096</b> (defaults to <b>2048</b>).</param>
            <param name="validDays">
            The number of days the certificate will be valid.  This defaults to 365,000 days
            or about 1,000 years.
            </param>
            <param name="wildcard">
            Optionally generate a wildcard certificate for the subdomains of 
            <paramref name="hostname"/> or the combination of the subdomains
            and the hostname.  This defaults to <see cref="F:Neon.Cryptography.Wildcard.None"/>
            which does not generate a wildcard certificate.
            </param>
            <param name="issuedBy">Optionally specifies the issuer.</param>
            <param name="issuedTo">Optionally specifies who/what the certificate is issued for.</param>
            <returns>The new <see cref="T:Neon.Cryptography.TlsCertificate"/>.</returns>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.CreateSelfSigned(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Generates a self-signed certificate for arbitrary hostnames, possibly including 
            hostnames with wildcards.
            </summary>
            <param name="hostnames">
            <para>
            The certificate hostnames.
            </para>
            <note>
            You can use include a <b>"*"</b> to specify a wildcard
            certificate like: <b>*.test.com</b>.
            </note>
            </param>
            <param name="bitCount">The certificate key size in bits: one of <b>1024</b>, <b>2048</b>, or <b>4096</b> (defaults to <b>2048</b>).</param>
            <param name="validDays">
            The number of days the certificate will be valid.  This defaults to 365,000 days
            or about 1,000 years.
            </param>
            <param name="issuedBy">Optionally specifies the issuer.</param>
            <param name="issuedTo">Optionally specifies who/what the certificate is issued for.</param>
            <returns>The new <see cref="T:Neon.Cryptography.TlsCertificate"/>.</returns>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.Validate(System.String)">
            <summary>
            Validates a certificate file.
            </summary>
            <param name="path">Path to the certificate.</param>
            <exception cref="T:System.ArgumentException">Thrown if the certificate is not valid.</exception>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.#ctor">
            <summary>
            Constructs an uninitialized certificate.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.#ctor(System.String)">
            <summary>
            Constructs an instance by parsing the combined site certificate, any intermediate
            certificates followed by the private key as PEM encoded text.
            </summary>
            <param name="pemCombined">The certificate(s) followed by the private key text.</param>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.#ctor(System.String,System.String)">
            <summary>
            Constructs an instance by parsing the certificate and private key PEM encoded
            text passed.
            </summary>
            <param name="certPem">The certificate PEM text.</param>
            <param name="keyPem">The optional private key PEM text.</param>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.CertPem">
            <summary>
            The public certificate as PEM encoded text.
            </summary>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.CertPemNormalized">
            <summary>
            The public certificate as PEM encoded text normalized with Linux-style line endings.
            </summary>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.KeyPem">
            <summary>
            The private key as PEM encoded text or <c>null</c> if the private key
            is not present.
            </summary>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.KeyPemNormalized">
            <summary>
            The private key as PEM encoded text normalized with Linux-style line endings
            or <c>null</c> if the private key is not present.
            </summary>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.CombinedPem">
            <summary>
            Returns the combined certificate and private key as PEM encoded text.
            </summary>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.CombinedPemNormalized">
            <summary>
            Returns the combined certificate and private key as PEM encoded text normalized
            with Linux-style line endings for HAProxy compatability.
            </summary>
            <returns>The combined PEM coded certificate.</returns>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.FriendlyName">
            <summary>
            <para>
            The friendly name for the certificate.
            </para>
            <note>
            This property was added for convienence and is not loaded from the 
            certificate data.  You may set this to whatever you wish.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.ValidFrom">
            <summary>
            The date when the certificate becomes valid (or <c>null</c>).
            </summary>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.ValidUntil">
            <summary>
            The date when the certificate expires (or <c>null</c>).
            </summary>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.Hosts">
            <summary>
            The DNS hostnames covered by the certificate.  This may be a single or wildcard hostname
            extracted from the certificate's <b>Common Name</b> or multiple hostname extracted
            from the <b>Subject Alternative Name</b> from a SAN certificate.  This list will be 
            <c>null</c> or empty if the hostname(s) are unknown.
            </summary>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.Thumbprint">
            <summary>
            The certificate thumbprint.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.Clone">
            <summary>
            Returns a deep copy of the instance.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="P:Neon.Cryptography.TlsCertificate.HostNames">
            <summary>
            Returns the DNS hostnames covered by the certificate as a comma separated string.
            </summary>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.IsValidDate(System.Nullable{System.DateTime})">
            <summary>
            Determines whether the certificate is valid for the current or an optionally a specified date.
            </summary>
            <param name="dateTimeUtc">The optional date (UTC) to check.</param>
            <returns><c>true</c> if the certificate is valid for the date.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either of <see cref="P:Neon.Cryptography.TlsCertificate.ValidFrom"/> or <see cref="P:Neon.Cryptography.TlsCertificate.ValidUntil"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.IsValidHost(System.String)">
            <summary>
            Determines whether the certificate is valid for a hostname.
            </summary>
            <param name="hostname">The hostname to validate.</param>
            <returns><c>true</c> if the certificate is valid for the hostname.</returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if <see cref="P:Neon.Cryptography.TlsCertificate.Hosts"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.ExtractField(System.String,System.String,System.Boolean)">
            <summary>
            Extracts a field from a certificate dump.
            </summary>
            <param name="prefix">The field prefix.</param>
            <param name="info">The certificate dump.</param>
            <param name="throwOnNotFound">Can optionally disable not found error checking.</param>
            <returns>The extracted field or <c>null</c> if it was not found.</returns>
            <exception cref="T:System.FormatException">Thrown if the field wasn't found and error checking isn't disabled.</exception>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.AddHost(System.String)">
            <summary>
            Adds a host to <see cref="P:Neon.Cryptography.TlsCertificate.Hosts"/> if it doesn't already exist.
            </summary>
            <param name="host">The host to be added.</param>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.ParseCertUtil(System.String)">
            <summary>
            Extracts certificate properties such as <see cref="P:Neon.Cryptography.TlsCertificate.ValidFrom"/>, <see cref="P:Neon.Cryptography.TlsCertificate.ValidUntil"/>, and <see cref="P:Neon.Cryptography.TlsCertificate.Hosts"/> 
            from the dump output from the Windows <b>CertUtil.exe</b> tool (e.g. via <c>certutil -dump cert.pem</c>).
            </summary>
            <param name="info">The dumped certificate information.</param>
            <remarks>
            <note>
            Interesting Fact: <b>OpenSSL</b> and <b>CertUtil</b> report slightly different valid dates
            for the same certificate.  It appears that <b>CertUtil</b> reports the actual dates whereas
            <b>OpenSSL</b> rounds <see cref="P:Neon.Cryptography.TlsCertificate.ValidFrom"/> down to <b>00:00:00</b> and rounds <see cref="P:Neon.Cryptography.TlsCertificate.ValidUntil"/> 
            up to <b>23:59:59</b>.  I'm guessing OpenSSL is doing this to give clients that do not
            properly handle UTC conversions times some leaway at the beginning and end of a certficiate's life.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.ParseOpenSsl(System.String)">
            <summary>
            Extracts certificate properties such as <see cref="P:Neon.Cryptography.TlsCertificate.ValidFrom"/>, <see cref="P:Neon.Cryptography.TlsCertificate.ValidUntil"/>, and <see cref="P:Neon.Cryptography.TlsCertificate.Hosts"/> 
            from the dump output from the <b>OpenSSL</b> tool (e.g. via <c>openssl x509 -in cert.pem -text</c>).
            </summary>
            <param name="info">The dumped certificate information.</param>
            <remarks>
            <note>
            Interesting Fact: <b>OpenSSL</b> and <b>CertUtil</b> report slightly different valid dates
            for the same certificate.  It appears that <b>CertUtil</b> reports the actual dates whereas
            <b>OpenSSL</b> rounds <see cref="P:Neon.Cryptography.TlsCertificate.ValidFrom"/> down to <b>00:00:00</b> and rounds <see cref="P:Neon.Cryptography.TlsCertificate.ValidUntil"/> 
            up to <b>23:59:59</b>.  I'm guessing OpenSSL is doing this to give clients that do not
            properly handle UTC conversions times some leaway at the beginning and end of a certficiate's life.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.Parse">
            <summary>
            Attempts to parse the certificate details.
            </summary>
            <exception cref="T:System.FormatException">Thrown if the certificate cannot be parsed.</exception>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.ToX509(System.Boolean)">
            <summary>
            <para>
            Converts the <see cref="T:Neon.Cryptography.TlsCertificate"/> into a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.
            </para>
            <note>
            The certificate return <b>will not</b> include the <see cref="T:Neon.Cryptography.TlsCertificate"/>'s private
            key if there is one.
            </note>
            </summary>
            <param name="publicOnly">Optionally include just the public certificate and exclude any private key.</param>
            <returns>The new <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.</returns>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.ExtractPemBytes(System.String)">
            <summary>
            <para>
            Extracts and decodes the base-64 encoded bytes within PEM text.
            </para>
            <note>
            This works only when the PEM text includes only a single
            <b>BEGIN...END</b> section.
            </note>
            </summary>
            <param name="pem">The PEM text.</param>
            <returns>The extracted bytes.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="pem"/> includes more than one base-64 encoded section.</exception>
        </member>
        <member name="M:Neon.Cryptography.TlsCertificate.ParseRSAKeyPem">
            <summary>
            Reads a RSA key from the <see cref="P:Neon.Cryptography.TlsCertificate.KeyPem"/>.
            </summary>
            <returns>The RSA key (or <c>null</c>).</returns>
        </member>
        <member name="T:Neon.Cryptography.Wildcard">
            <summary>
            Enumerates the possible wildcard certificate generation modes.
            </summary>
        </member>
        <member name="F:Neon.Cryptography.Wildcard.None">
            <summary>
            Do not create a wildcard certificate.
            </summary>
        </member>
        <member name="F:Neon.Cryptography.Wildcard.SubdomainsOnly">
            <summary>
            Create a certificate that covers all subdomains <b>*.mydomain.com</b>.
            </summary>
        </member>
        <member name="F:Neon.Cryptography.Wildcard.RootAndSubdomains">
            <summary>
            Create a certificate the covers both the root domain <b>mydomain.com</b>
            as well as all subdomains <b>*.mydomain.com</b>.
            </summary>
        </member>
    </members>
</doc>
