<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Couchbase</name>
    </assembly>
    <members>
        <member name="T:Couchbase.CouchbaseExtensions">
            <summary>
            Couchbase related extensions.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GenKey(Couchbase.Core.IBucket)">
            <summary>
            Generates a globally unique document key.
            </summary>
            <param name="bucket">The bucket.</param>
            <returns>A <see cref="T:System.Guid"/> formatted as a string.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.IsTransientStatus(Couchbase.IO.ResponseStatus,System.Boolean)">
            <summary>
            Determines whether a Couchbase response status code should be considered
            a transient error.
            </summary>
            <param name="status">The status code.</param>
            <param name="replicateOrPersist">Indicates whether the operation has replication or persistance constraints.</param>
            <returns><c>true</c> for a transient error.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.VerifySuccess(Couchbase.IOperationResult,System.Boolean)">
            <summary>
            Throws an exception if an operation was not successful.
            </summary>
            <param name="result">The operation result.</param>
            <param name="replicateOrPersist">Indicates whether the operation has replication or persistance constraints.</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.VerifySuccess``1(Couchbase.IOperationResult{``0},System.Boolean)">
            <summary>
            Throws an exception if an operation was not successful.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="result">The operation result.</param>
            <param name="replicateOrPersist">Indicates whether the operation has replication or persistance constraints.</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.VerifySuccess``1(Couchbase.IDocumentResult{``0},System.Boolean)">
            <summary>
            Throws an exception if a document operation was not successful.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="result">The operation result.</param>
            <param name="replicateOrPersist">Indicates whether the operation has replication or persistance constraints.</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.VerifySuccess``1(Couchbase.N1QL.IQueryResult{``0})">
            <summary>
            Throws an exception if a query operation was not successful.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="result">The operation result.</param>
            <exception cref="T:Couchbase.CouchbaseResponseException">Thrown for errors.</exception>
            <exception cref="T:Neon.Retry.TransientException">Thrown if the error is potentially transient and the operation should be retried.</exception>
            <remarks>
            <para>
            This method is similar to the built-in Couchbase
            <see cref="M:Couchbase.ResponseExtensions.EnsureSuccess``1(Couchbase.N1QL.IQueryResult{``0})"/>
            method, but may be better for many situations for these reasons:
            </para>
            <list type="bullet">
                <item>
                This method includes information about the specific errors detected.
                <see cref="M:Couchbase.ResponseExtensions.EnsureSuccess``1(Couchbase.N1QL.IQueryResult{``0})"/>
                only returns a generic <b>Fatal Error</b> message and expects you
                to examine the <see cref="P:Couchbase.N1QL.CouchbaseQueryResponseException.Errors"/> 
                property in your code.  This methods does that for you by including
                the errors in the exception message so that that they will be included
                in any diagnostic logging your doing without any additional effort.
                </item>
                <item>
                This method throws a <see cref="T:Neon.Retry.TransientException"/> if the
                error indicates that it should be retried.  This makes it easy
                to use a Neon <see cref="T:Neon.Retry.IRetryPolicy"/> to perform retries.
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.CheckAsync(Couchbase.Core.IBucket)">
            <summary>
            Performs small read/query operations to verify that the database connection 
            is healthy.
            </summary>
            <param name="bucket">The bucket.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Couchbase.CouchbaseResponseException">Thrown if the bucket is not ready.</exception>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.WaitUntilReadyAsync(Couchbase.Core.IBucket,System.TimeSpan)">
            <summary>
            Waits until the bucket is ready.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="timeout">Optionally specifies the maximum time to wait (defaults to 60 seconds).</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.TimeoutException">Thrown if the operation timed out.</exception>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.WaitForIndexer(Couchbase.Core.IBucket)">
            <summary>
            <para>
            Waits for any pending database updates to be indexed.  This can be used to
            implement <b>read your own writes.</b>.
            </para>
            <note>
            <b>IMPORTANT:</b> This is intended for use only for databases with a
            <b>#primary</b> index.
            </note>
            </summary>
            <param name="bucket">The bucket.</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.WaitForIndexerAsync(Couchbase.Core.IBucket)">
            <summary>
            <para>
            Waits for any pending database updates to be indexed.  This can be used to
            implement <b>read your own writes.</b>.
            </para>
            <note>
            <b>IMPORTANT:</b> This is intended for use only for databases with a
            <b>#primary</b> index.
            </note>
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <param name="bucket">The bucket.</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.AppendSafeAsync(Couchbase.Core.IBucket,System.String,System.Byte[])">
            <summary>
            Appends a byte array to a key, throwing an exception on failures.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.AppendAsync(Couchbase.Core.IBucket,System.String,System.String)">
            <summary>
            Appends a string to a key, throwing an exception on failures.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.DecrementSafeAsync(Couchbase.Core.IBucket,System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by one.  If the key doesn't exist, it will be
            created and initialized to <paramref name="initial"/>.  This method will throw
            an exception on failures.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="delta">The amount to decrement by (defaults to <b>1</b>).</param>
            <param name="initial">The initial value to use if the key doesn't already exist (defaults to <b>1</b>).</param>
            <param name="expiration">The expiration TTL (defaults to none).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ExistsSafeAsync(Couchbase.Core.IBucket,System.String)">
            <summary>
            Checks for the existance of a key, throwing an exception on failures.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <returns><c>true</c> if the key exists.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.FindSafeAsync``1(Couchbase.Core.IBucket,System.String)">
            <summary>
            Attempts to retrieve a key value, returning <c>null</c> if it doesn't exist rather
            than throwing an exception.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <returns>The value or <c>null</c>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.FindDocumentSafeAsync``1(Couchbase.Core.IBucket,System.String)">
            <summary>
            Attemps to retrieve a document, returning <c>null</c> if it doesn't exist rather
            than throwing an exception.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <returns>The value or <c>null</c>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetAndLockSafeAsync``1(Couchbase.Core.IBucket,System.String,System.TimeSpan)">
            <summary>
            Gets a key and locks it for a specified time period.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="expiration">The interval after which the document will be locked.  This defaults to 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetAndTouchSafeAsync``1(Couchbase.Core.IBucket,System.String,System.TimeSpan)">
            <summary>
            Gets a key and updates its expiry with a new value.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="expiration">The optional new expiry timespan.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetAndTouchDocumentSafeAsync``1(Couchbase.Core.IBucket,System.String,System.TimeSpan)">
            <summary>
            Gets a document and updates its expiry with a new value.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="expiration">The optional new expiry timespan.</param>
            <returns>The document.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetSafeAsync``1(Couchbase.Core.IBucket,System.String)">
            <summary>
            Gets a key value from the database, throwing an exception if the key does not exist
            or there was another error.  
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetDocumentSafeAsync``1(Couchbase.Core.IBucket,System.String,System.TimeSpan)">
            <summary>
            Gets a document, throwing an exception if the document does not exist or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="keys">The key.</param>
            <param name="expiration">The optional new expiry timespan.</param>
            <returns>The document.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetDocumentSafeAsync``1(Couchbase.Core.IBucket,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a set of documents, throwing an exception if any document does not exist or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="keys">The keys.</param>
            <returns>The documents.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetFromReplicaSafeAsync``1(Couchbase.Core.IBucket,System.String)">
            <summary>
            Gets a key value from a Couchbase replica node, throwing an exception if the key does
            not exist or there was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.IncrementSafeAsync(Couchbase.Core.IBucket,System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by one.  If the key doesn't exist, it will be
            created and initialized to <paramref name="initial"/>.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="delta">The amount to increment by (defaults to <b>1</b>).</param>
            <param name="initial">The initial value to use if the key doesn't already exist (defaults to <b>1</b>).</param>
            <param name="expiration">The expiration TTL (defaults to none).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a key, throwing an exception if the key already exists or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a key with an expiration TTL, throwing an exception if the key already exists or there
            was another error.  Note that 30 seconds is the maximum expiration TTL supported by the
            server.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiration">The expiration TTL.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document, throwing an exception if the document already exists or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="document">The document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts multiple documents, throwing an exception if any of the documents already exists or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="documents">The documents.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document, throwing an exception if the document already exists or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document, with an expiration TTL, throwing an exception if the key already exists or there
            was another error.  Note that 30 seconds is the maximum expiration TTL supported by the
            server.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="expiration">The expiration TTL.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.QuerySafeAsync``1(Couchbase.Core.IBucket,Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Executes a query request, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="queryRequest">The query request.</param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.QuerySafeAsync``1(Couchbase.Core.IBucket,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a N1QL string query, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="query">The N1QL query string.</param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.QuerySafeAsync``1(Couchbase.Core.IBucket,Couchbase.N1QL.IQueryRequest,Couchbase.N1QL.MutationState,System.Threading.CancellationToken)">
            <summary>
            Executes a query request after ensuring that the indexes have caught
            up to the specified mutation state, throwing an exception if there were
            any errors.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="queryRequest">The query request.</param>
            <param name="mutationState">
            Specifies the required index mutation state that must be satisfied before
            the query will be executed.
            </param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.QuerySafeAsync``1(Couchbase.Core.IBucket,System.String,Couchbase.N1QL.MutationState,System.Threading.CancellationToken)">
            <summary>
            Executes a N1QL string query, after ensuring that the indexes have caught
            up to the specified mutation state, throwing an exception if there were
            any errors.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="query">The N1QL query string.</param>
            <param name="mutationState">
            Specifies the required index mutation state that must be satisfied before
            the query will be executed.
            </param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.RemoveSafeAsync(Couchbase.Core.IBucket,Couchbase.IDocument{System.Threading.Tasks.Task},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document throwning an exception if there were any errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="document">The document to be deleted.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.RemoveSafeAsync(Couchbase.Core.IBucket,System.Collections.Generic.List{Couchbase.IDocument{System.Threading.Tasks.Task}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes multiple documents, throwing an exception if there were any errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="documents">The document to be deleted.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.RemoveSafeAsync(Couchbase.Core.IBucket,System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a key, throwning an exception if there were any errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key to be deleted.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.RemoveSafeAsync(Couchbase.Core.IBucket,Neon.Data.IPersistableType,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes an <see cref="T:Neon.Data.IPersistableType"/> document,  throwning an exception if there were any errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document to be deleted.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an existing document, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="document">The replacement document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces multiple documents, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="documents">The replacement documents.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a key value, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The replacement value.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,System.Nullable{System.UInt64},System.Nullable{System.TimeSpan},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a key value, optionally specifying a CAS value and throwing an exception
            if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The replacement value.</param>
            <param name="cas">The optional CAS value.</param>
            <param name="expiration">Optional expiration TTL.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes an <see cref="T:Neon.Data.IPersistableType"/> document, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The replacement document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,``0,System.Nullable{System.UInt64},System.Nullable{System.TimeSpan},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes an <see cref="T:Neon.Data.IPersistableType"/> document, optionally specifying a CAS value and throwing an exception
            if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The replacement document.</param>
            <param name="cas">The optional CAS value.</param>
            <param name="expiration">Optional expiration TTL.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.TouchSafeAsync(Couchbase.Core.IBucket,System.String,System.TimeSpan)">
            <summary>
            Touches a key and updates its expiry, throwing an exception if there were errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="expiration"></param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.TouchSafeAsync(Couchbase.Core.IBucket,Neon.Data.IPersistableType,System.TimeSpan)">
            <summary>
            Touches an <see cref="T:Neon.Data.IPersistableType"/> document and updates its expiry, throwing an exception if there were errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="expiration"></param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UnlockSafeAsync(Couchbase.Core.IBucket,System.String,System.UInt64)">
            <summary>
            Unlocks a key, throwing an exception if there were errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="cas">The CAS value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UnlockSafeAsync(Couchbase.Core.IBucket,Neon.Data.IPersistableType,System.UInt64)">
            <summary>
            Unlocks an <see cref="T:Neon.Data.IPersistableType"/> document, throwing an exception if there were errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="cas">The CAS value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates a document, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="document">The document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates a key, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates an <see cref="T:Neon.Data.IPersistableType"/> document, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates a key using a CAS, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="cas">The CAS.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document, using a CAS, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="cas">The CAS.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates a key setting an expiration, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiration">The expiration.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates an <see cref="T:Neon.Data.IPersistableType"/> document, setting an expiration and throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="expiration">The expiration.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates a key using a CAS and setting an expiration, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="cas">The CAS.</param>
            <param name="expiration">The expiration.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates an <see cref="T:Neon.Data.IPersistableType"/> document, using a CAS and setting an expiration, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="cas">The CAS.</param>
            <param name="expiration">The expiration.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ListIndexesAsync(Couchbase.Core.IBucket)">
            <summary>
            Lists the indexes for the test bucket.
            </summary>
            <param name="bucket">The Couchbase bucket.</param>
            <returns>The list of index information.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetIndexAsync(Couchbase.Core.IBucket,System.String)">
            <summary>
            Returns information about a named Couchbase index for the test bucket.
            </summary>
            <param name="bucket">The Couchbase bucket.</param>
            <param name="name">The index name.</param>
            <returns>
            The index information as a <c>dynamic</c> or <c>null</c> 
            if the index doesn't exist.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.WaitForIndexAsync(Couchbase.Core.IBucket,System.String,System.String)">
            <summary>
            Waits for a named index to enter a specific state (defaults to <b>online</b>).
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="name">The index name.</param>
            <param name="state">Optionally specifies the desire state (defaults to <b>online</b>).</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and perstance constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints and an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints and an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persitsence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replicatioon and persistence constraints and and expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication, constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS replication, constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, rep[lication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, replication constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document wsith replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration, replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration, and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration, and replication and persistence constraints, and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints, and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a replicatioin constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and replication and peristence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration, replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, replication and peristence constraints, and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and replication and persistene constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration, replication and peristence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints, and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.OpenCluster(Neon.Data.CouchbaseSettings,System.String,System.String)">
            <summary>
            Returns a Couchbase cluster connection using specified settings and the username and password.
            </summary>
            <param name="settings">The Couchbase settings.</param>
            <param name="username">The cluster username.</param>
            <param name="password">The cluster password.</param>
            <returns>The connected <see cref="T:Couchbase.Cluster"/>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.OpenCluster(Neon.Data.CouchbaseSettings,Neon.Common.Credentials)">
            <summary>
            Returns a Couchbase cluster connection using specified settings and <see cref="T:Neon.Common.Credentials"/>.
            </summary>
            <param name="settings">The Couchbase settings.</param>
            <param name="credentials">Cluster credentials.</param>
            <returns>The connected <see cref="T:Couchbase.Cluster"/>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.OpenBucket(Neon.Data.CouchbaseSettings,System.String,System.String,System.TimeSpan,System.Nullable{System.Boolean})">
            <summary>
            Returns a Couchbase bucket connection using specified settings and the cluster credentials.
            </summary>
            <param name="settings">The Couchbase settings.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="timeout">The optional timeout (defaults to 60 seconds).</param>
            <param name="ignoreDurability">Optionally configure the bucket to ignore durability parameters.</param>
            <returns>The connected <see cref="T:Couchbase.NeonBucket"/>.</returns>
            <exception cref="T:System.TimeoutException">Thrown if the bucket is not ready after waiting <paramref name="timeout"/>.</exception>
            <remarks>
            <para>
            You may explicitly pass <paramref name="ignoreDurability"/><c>=true</c> for 
            development and test environments where there may not be enough cluster nodes to
            satisfy durability constraints.  If this is <c>null</c> (the default) then the bucket 
            will look for the presence of the <b>DEV_WORKSTATION</b> environment variable
            and ignore durability constraints if this variable exists, otherwise durability
            constraints will be honored.
            </para>
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.OpenBucket(Neon.Data.CouchbaseSettings,Neon.Common.Credentials,System.TimeSpan,System.Nullable{System.Boolean})">
            <summary>
            Returns a Couchbase bucket connection using specified settings and credentials.
            </summary>
            <param name="settings">The Couchbase settings.</param>
            <param name="credentials">The credentials.</param>
            <param name="timeout">The optional timeout (defaults to 30 seconds).</param>
            <param name="ignoreDurability">Optionally configure the bucket to ignore durability parameters.</param>
            <returns>The connected <see cref="T:Couchbase.NeonBucket"/>.</returns>
            <remarks>
            <para>
            You may explicitly pass <paramref name="ignoreDurability"/><c>=true</c> for 
            development and test environments where there may not be enough cluster nodes to
            satisfy durability constraints.  If this is <c>null</c> (the default) then the bucket 
            will look for the presence of the <b>DEV_WORKSTATION</b> environment variable
            and ignore durability constraints if this variable exists, otherwise durability
            constraints will be honored.
            </para>
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ToClientConfig(Neon.Data.CouchbaseSettings)">
            <summary>
            Converts a <see cref="T:Neon.Data.CouchbaseSettings"/> into a <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>.
            </summary>
            <param name="settings">The simplified Couchbase settings instance.</param>
            <returns>A Couchbase <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>.</returns>
        </member>
        <member name="T:Couchbase.CouchbaseHelper">
            <summary>
            Couchbase helper utilities.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.Literal(System.String)">
            <summary>
            Converts a <c>string</c> into a Couchbase literal suitable
            for direct inclusion into a Couchbase query string.  This
            handles any required quoting and character escaping.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal value.</returns>
            <remarks>
            <note>
            The string returned will always be surrounded by single quotes.
            </note>
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.LiteralName(System.String)">
            <summary>
            Converts a <c>string</c> into a Couchbase name suitable
            for direct inclusion into a Couchbase statement.  This
            handles any required quoting and character escaping.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal name.</returns>
            <remarks>
            <note>
            The name returned will always be surrounded by single back
            tick marks.
            </note>
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.Literal(System.Int32)">
            <summary>
            Converts an <c>int</c> into a literal value.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.Literal(System.Int64)">
            <summary>
            Converts a <c>long</c> into a literal value.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.Literal(System.Boolean)">
            <summary>
            Converts a <c>bool</c> into a literal value.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.Literal(System.Double)">
            <summary>
            Converts a <c>double</c> into a literal value.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal value.</returns>
        </member>
        <member name="T:Couchbase.CouchbaseIndex">
            <summary>
            Describes the current state of a Couchbase index.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseIndex.#ctor(System.Object)">
            <summary>
            Constructs an instance from a <c>dynamic</c> object returned by
            a <c>select * from system:indexes</c> query.
            </summary>
            <param name="indexInfo">The index information.</param>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.Name">
            <summary>
            Returns the index name.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.Type">
            <summary>
            Identifies the technology used to host the index, currently one of
            <b>gsi</b> or <b>view</b>.  This corresponds to the underlying
            Couchbase <b>using</b> property.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.IsPrimary">
            <summary>
            Returns <c>true</c> for primary indexes.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.State">
            <summary>
            Returns the index state.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.Keys">
            <summary>
            Returns the array of index keys.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.Where">
            <summary>
            Returns the index's <b>where</b> condition.
            </summary>
        </member>
        <member name="T:Couchbase.CouchbaseTransientDetector">
            <summary>
            Determines whether an exception thrown by a Couchbase client operation
            indicates a potentially transistent problem.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseTransientDetector.IsTransient(System.Exception)">
            <summary>
            Returns <c>true</c> if the exception passed should be considered to be a
            potentially transient Couchbase error.
            </summary>
            <param name="e">The exception being tested.</param>
            <returns><c>true</c> if the error was potentially transient.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseTransientDetector.IsCasTransient(System.Exception)">
            <summary>
            Returns <c>true</c> if the exception passed should be considered to be a
            CAS (check-and-set) error that could be retried in application code.
            </summary>
            <param name="e">The exception being tested.</param>
            <returns><c>true</c> if the error was potentially transient.</returns>
        </member>
        <member name="T:Couchbase.EntitySerializer">
            <summary>
            Implements a Couchbase serializer that's capable of handling <see cref="T:Neon.Data.IPersistableType"/>
            based objects in addition to plain-old-objects.
            </summary>
        </member>
        <member name="M:Couchbase.EntitySerializer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Couchbase.EntitySerializer.SupportedDeserializationOptions">
            <summary>
            Not required.
            </summary>
        </member>
        <member name="P:Couchbase.EntitySerializer.DeserializationOptions">
            <summary>
            Not required.
            </summary>
        </member>
        <member name="M:Couchbase.EntitySerializer.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.EntitySerializer.Deserialize``1(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.EntitySerializer.GetMemberName(System.Reflection.MemberInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.EntitySerializer.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Couchbase.NeonBucket">
            <summary>
            Wraps an <see cref="T:Couchbase.Core.IBucket"/> adding some additional capabilities.
            </summary>
            <remarks>
            <para>
            This bucket can be configured to ignore replicate and persist durability
            constraints.  You can explicitly pass <c>ignoreDurability=true</c> to the
            constructor for development and test environments where there may not be enough 
            cluster nodes to satisfy durability constraints.  If this is <c>null</c> (the default)
            then the bucket  will look for the presence of the <b>DEV_WORKSTATION</b> environment
            variable and ignore durability constraints if this variable exists.
            </para>
            <para>
            This means that production and staging environments that don't have the
            <b>DEV_WORKSTATION</b> environment variable will enforce durability by
            default and development/test environments that have this set will not
            enforce durability be default.
            </para>
            </remarks>
        </member>
        <member name="P:Couchbase.NeonBucket.ReadyTimeout">
            <summary>
            <b>HACk:</b> Returns the timeout used when ensuring that a bucket is ready for use.
            </summary>
        </member>
        <member name="P:Couchbase.NeonBucket.ReadyRetry">
            <summary>
            <b>HACk:</b> Returns the retry policy used when ensuring that a bucket is ready for use.
            </summary>
        </member>
        <member name="M:Couchbase.NeonBucket.#ctor(Couchbase.Core.IBucket,Neon.Data.CouchbaseSettings,System.Nullable{System.Boolean})">
            <summary>
            Constructor.
            </summary>
            <param name="bucket">The underlying Couchbase bucket implementation.</param>
            <param name="settings">The Couchbase client settings.</param>
            <param name="ignoreDurability">Optionally configure the bucket to ignore durability parameters.</param>
            <remarks>
            <para>
            You may explicitly pass <paramref name="ignoreDurability"/><c>=true</c> for 
            development and test environments where there may not be enough cluster nodes to
            satisfy durability constraints.  If this is <c>null</c> (the default) then the bucket 
            will look for the presence of the <b>DEV_WORKSTATION</b> environment variable
            and ignore durability constraints if this variable exists, otherwise durability
            constraints will be honored.
            </para>
            </remarks>
        </member>
        <member name="P:Couchbase.NeonBucket.IgnoreDurability">
            <summary>
            Indicates whether this bucket is ignoring any <see cref="T:Couchbase.ReplicateTo"/> and/or <see cref="T:Couchbase.PersistTo"/>
            durability constraints.  This is useful for unit testing where it'll be likely that there won't be
            enough Couchbase cluster nodes to satisfy durability constraints for production code.
            </summary>
        </member>
        <member name="M:Couchbase.NeonBucket.Adjust(Couchbase.ReplicateTo)">
            <summary>
            Adjusts a <see cref="T:Couchbase.ReplicateTo"/> parameter based on the bucket's
            durability mode.
            </summary>
            <param name="replicateTo">The input value.</param>
            <returns>The value to actually use.</returns>
        </member>
        <member name="M:Couchbase.NeonBucket.Adjust(Couchbase.PersistTo)">
            <summary>
            Adjusts a <see cref="T:Couchbase.PersistTo"/> parameter based on the bucket's
            durability mode.
            </summary>
            <param name="persistTo">The input value.</param>
            <returns>The value to actually use.</returns>
        </member>
        <member name="M:Couchbase.NeonBucket.SetInternalBucket(Couchbase.Core.IBucket)">
            <summary>
            <b>INTERNAL USE ONLY:</b> This is used in special situations where the internal
            backing bucket needs to be replaced.  This is currently used within the Couchbase
            test fixture.
            </summary>
            <param name="bucket">The bucket to be set or <c>null</c>.</param>
        </member>
        <member name="M:Couchbase.NeonBucket.GetInternalBucket">
            <summary>
            <b>INTERNAL USE ONLY:</b> Returns the internal bucket.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.NeonBucket.Name">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.BucketType">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.Cluster">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.IsSecure">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.SupportsEnhancedDurability">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.SupportsKvErrorMap">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.Configuration">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Append(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Append(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Append(System.String,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Append(System.String,System.Byte[],System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.AppendAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.AppendAsync(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.AppendAsync(System.String,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.AppendAsync(System.String,System.Byte[],System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.CreateManager(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.CreateManager">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.CreateQuery(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.CreateQuery(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Exists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Exists(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ExistsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ExistsAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLock``1(System.String,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLock``1(System.String,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLock``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLock``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLockAsync``1(System.String,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLockAsync``1(System.String,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLockAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLockAsync``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouch``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouch``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchAsync``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchDocument``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchDocument``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchDocumentAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchDocumentAsync``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetClusterVersion">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetClusterVersionAsync">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocument``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocument``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentFromReplica``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentFromReplica``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentFromReplicaAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentFromReplicaAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentsAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentsAsync``1(System.Collections.Generic.IEnumerable{System.String},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetFromReplica``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetFromReplica``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetFromReplicaAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetFromReplicaAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetWithLock``1(System.String,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetWithLock``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetWithLockAsync``1(System.String,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetWithLockAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListAppend(System.String,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListAppend(System.String,System.Object,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListAppendAsync(System.String,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListAppendAsync(System.String,System.Object,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListGet``1(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListGet``1(System.String,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListGetAsync``1(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListGetAsync``1(System.String,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListPrepend(System.String,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListPrepend(System.String,System.Object,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListPrependAsync(System.String,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListPrependAsync(System.String,System.Object,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListRemove(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListRemove(System.String,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListRemoveAsync(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListRemoveAsync(System.String,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSet(System.String,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSet(System.String,System.Int32,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSetAsync(System.String,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSetAsync(System.String,System.Int32,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSize(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSizeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSizeAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.LookupIn``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.LookupIn``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapAdd(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapAdd(System.String,System.String,System.String,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapAddAsync(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapAddAsync(System.String,System.String,System.String,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapGet``1(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapGet``1(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapGetAsync``1(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapGetAsync``1(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapRemove(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapRemove(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapRemoveAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapRemoveAsync(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapSize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapSize(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapSizeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapSizeAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MutateIn``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MutateIn``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ObserveAsync(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ObserveAsync(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Ping(Couchbase.Core.Monitoring.ServiceType[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Ping(System.String,Couchbase.Core.Monitoring.ServiceType[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Prepend(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Prepend(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Prepend(System.String,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Prepend(System.String,System.Byte[],System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.PrependAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.PrependAsync(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.PrependAsync(System.String,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.PrependAsync(System.String,System.Byte[],System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Query``1(Couchbase.Views.IViewQueryable)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Query``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Query``1(Couchbase.N1QL.IQueryRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Query``1(Couchbase.Analytics.IAnalyticsRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Query(Couchbase.Search.SearchQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(Couchbase.Views.IViewQueryable)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(Couchbase.Analytics.IAnalyticsRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(Couchbase.Analytics.IAnalyticsRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync(Couchbase.Search.SearchQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync(Couchbase.Search.SearchQuery,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePop``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePop``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePopAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePopAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePush``1(System.String,``0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePush``1(System.String,``0,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePushAsync``1(System.String,``0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePushAsync``1(System.String,``0,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueueSize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueueSize(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueueSizeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueueSizeAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetAdd(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetAdd(System.String,System.String,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetAddAsync(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetAddAsync(System.String,System.String,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetContains(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetContains(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetContainsAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetContainsAsync(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetRemove``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetRemove``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetRemoveAsync``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetRemoveAsync``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetSize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetSize(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetSizeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetSizeAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Touch(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Touch(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.TouchAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.TouchAsync(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Unlock(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Unlock(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UnlockAsync(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UnlockAsync(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ExportDeferredAnalyticsQueryHandle``1(Couchbase.Analytics.IAnalyticsDeferredResultHandle{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ImportDeferredAnalyticsQueryHandle``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Data.CouchbaseImporter">
            <summary>
            Handles persisting JSON documents to Couchbase.
            </summary>
        </member>
        <member name="M:Neon.Data.CouchbaseImporter.#ctor(System.Action{System.String},Couchbase.Core.IBucket,System.String,System.Int64,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="errorSink">Action invoked when an error is encountered.</param>
            <param name="bucket">The target Couchbase bucket.</param>
            <param name="keyPattern">The key pattern (or <c>null</c>).</param>
            <param name="firstKey">Optionally specifies the first #MONO_INCR# key (defaults to <b>1</b>).</param>
            <param name="dryRun">
            Optionally specify that the class should go through the motions but 
            not actually persist anything.
            </param>
        </member>
        <member name="M:Neon.Data.CouchbaseImporter.ReportError(System.String)">
            <summary>
            Reports an error.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neon.Data.CouchbaseImporter.WriteDocument(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Persists a document to Couchbase.
            </summary>
            <param name="document">The document.</param>
            <remarks>
            <note>
            This method will remove any <b>@@key</b> property from 
            the document if present.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Data.CouchbaseImporter.DocumentCount">
            <summary>
            Returns the number of persisted documents.
            </summary>
        </member>
        <member name="T:Neon.Data.CouchbaseSettings">
            <summary>
            Settings used to connect a Couchbase client to a Couchbase bucket.
            </summary>
        </member>
        <member name="M:Neon.Data.CouchbaseSettings.Parse(System.String,System.Boolean)">
            <summary>
            Parses a <see cref="T:Neon.Data.CouchbaseSettings"/> from a JSON or YAML string,
            automatically detecting the input format.
            </summary>
            <param name="jsonOrYaml"></param>
            <param name="strict">Optionally require that all input properties map to route properties.</param>
            <returns>The parsed <see cref="T:Neon.Data.CouchbaseSettings"/>.</returns>
        </member>
        <member name="M:Neon.Data.CouchbaseSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Data.CouchbaseSettings.#ctor(System.Uri[])">
            <summary>
            Constructs an instance with server URIs.
            </summary>
            <param name="servers">Specifies one or more server URIs.</param>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.Servers">
            <summary>
            One or more Couchbase server URIs.
            </summary>
            <remarks>
            You must specify the URI for at least one operating Couchbase node.  The Couchbase
            client will use this to discover the remaining nodes.  It is a best practice to
            specify multiple nodes in a clustered environment to avoid initial connection
            problems if any single node is down.
            </remarks>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.Bucket">
            <summary>
            Optionally specifies the name of the target Couchbase bucket.
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.ConnectTimeout">
            <summary>
            Maximum time (milliseconds) to wait to establish a server connection (defaults to <b>10 seconds</b>).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.SendTimeout">
            <summary>
            Maximum time (milliseconds) to wait to transmit a server request (defaults to <b>10 seconds</b>).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.OperationTimeout">
            <summary>
            Maximum time (milliseconds) to wait for an operation to complete (defaults to <b>10 seconds</b>).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.QueryRequestTimeout">
            <summary>
            Maximum time (milliseconds) to wait for a non-view query to complete (defaults to 75 seconds).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.ViewRequestTimeout">
            <summary>
            Maximum time (milliseconds) to wait for a view query to complete (defaults to 75 seconds).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.MaxPoolConnections">
            <summary>
            Maximum number of pooled connections to a server bucket (defaults to <b>5</b>).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.MinPoolConnections">
            <summary>
            Minimum number of pooled connections to a server bucket (defaults to <b>2</b>).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.UseEnhancedDurability">
            <summary>
            Enables the use of the <see cref="F:Couchbase.N1QL.ScanConsistency.RequestPlus"/> index consistency option.  
            Both of these options are deprecated as of Couchbase 5.0 so this may no longer matter.  
            This defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.IsValid">
            <summary>
            Returns <c>true</c> if the settings are valid.
            </summary>
        </member>
        <member name="T:Neon.Data.EntityHelper">
            <summary>
            Helper methods for managing database entities.
            </summary>
        </member>
        <member name="T:Neon.Data.EntityHelper.EntityPropertyInfo">
            <summary>
            Holds information about an entity's property.
            </summary>
        </member>
        <member name="P:Neon.Data.EntityHelper.EntityPropertyInfo.Properties">
            <summary>
            The list of public properties as serialized to JSON.
            </summary>
        </member>
        <member name="P:Neon.Data.EntityHelper.EntityPropertyInfo.Select">
            <summary>
            The comma separated property names suitable for using in a N1QL
            <c>select</c> statement.
            </summary>
        </member>
        <member name="F:Neon.Data.EntityHelper.entityProperties">
            <summary>
            Caches the entity properties defined for an <see cref="T:Neon.Data.IPersistableType"/>.
            </summary>
        </member>
        <member name="M:Neon.Data.EntityHelper.CreateUuid">
            <summary>
            Generates a URI-safe globally unique ID.
            </summary>
            <returns>The ID as a string.</returns>
            <remarks>
            <note>
            The value returned is a <see cref="T:System.Guid"/> converted to base-64 and then
            made URI safe by replacing "=" characters with "-" and "/" to "_" and 
            also removing any "=" padding charcters.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntityRef(System.String)">
            <summary>
            Extracts the entity reference from an entity key.
            </summary>
            <param name="entityKey">The entity key.</param>
            <returns>The entity ID.</returns>
            <remarks>
            <para>
            This implements a common convention where Couchbase entities are persisted using a
            key formed by appending entity ID to the entity type, separated by a double
            colon (<b>"::"</b>).  This makes entity types available for filtering when
            managing cross datacenter replication.
            </para>
            <para>
            This method extracts the string after the first (<b>"::"</b>) as the document ID.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntityKey(System.String,System.String)">
            <summary>
            Generates an entity key from the entity reference and entity type.
            </summary>
            <param name="entityRef">The entity reference.</param>
            <param name="entityType">The entity type.</param>
            <returns>The entity key.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entityRef"/> is <c>null</c> or empty.</exception>
            <remarks>
            <para>
            Stoke follows a common convention where Couchbase entities are persisted using a
            key formed by appending entity reference to the entity type, separated by a double
            colon (<b>"::"</b>).  This makes entity types available for filtering when
            managing cross datacenter replication.
            </para>
            <para>
            This method concatenates the entity type and ID using a (<b>"::"</b>) separator.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntityKey(System.String)">
            <summary>
            Generates an entity key from the a GUID and entity type.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The entity key.</returns>
            <remarks>
            <para>
            Stoke follows a common convention where Couchbase entities are persisted using a
            key formed by appending entity ID to the entity type, separated by a double
            colon (<b>"::"</b>).  This makes entity types available for filtering when
            managing cross datacenter replication.
            </para>
            <para>
            This method concatenates the entity type and ID using a (<b>"::"</b>) separator.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Data.EntityHelper.ToCouchbase(System.DateTime)">
            <summary>
            Serializes a <see cref="T:System.DateTime"/> into the standard format used
            for persisting to Couchbase.
            </summary>
            <param name="input">The input time.</param>
            <returns>The serialized output.</returns>
        </member>
        <member name="M:Neon.Data.EntityHelper.ToCouchbase(System.DateTimeOffset)">
            <summary>
            Serializes a <see cref="T:System.DateTimeOffset"/> into the standard format used
            for persisting to Couchbase.
            </summary>
            <param name="input">The input time.</param>
            <returns>The serialized output.</returns>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntityPropertyInfo``1">
            <summary>
            Returns the serializable property information for an entity.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <returns>The <see cref="T:Neon.Data.EntityHelper.EntityPropertyInfo"/>.</returns>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntityProperties``1">
            <summary>
            Returns the names of an entity's properties that will be serialized to JSON.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <returns>The set of property names.</returns>
            <remarks>
            <para>
            This method is handy when manually building <b>N1QL</b> query strings when
            you want to return all entity fields but you don't want to use <c>select *</c>
            because this nests each result into a property named for the bucket.
            I'm not entirely sure why Couchbase does this.
            </para>
            <note>
            This method will include all public entity properties that do not have the
            <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> and this also honors the property names
            specified by any <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> attributes.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntitySelectProperties``1">
            <summary>
            Returns the comma separated names of an entity's properties in a form where 
            they can be easily added to a manually created N1QL statement.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <returns>The comma separated list of of property names.</returns>
            <remarks>
            <para>
            This method is handy when manually building <b>N1QL</b> query strings when
            you want to return all entity fields but you don't want to use <c>select *</c>
            because this nests each result into a property named for the bucket.  You may
            use the result to replace the star (<b>*</b>) in the <c>select</c> with the
            explicit property names.
            </para>
            <note>
            This method will include all public entity properties that do not have the
            <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> and this also honors the property names
            specified by any <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> attributes.
            </note>
            </remarks>
        </member>
    </members>
</doc>
